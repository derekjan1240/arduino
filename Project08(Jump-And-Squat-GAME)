/*2017.12.22  躲避障礙物小遊戲

遊戲方法:

1.按按鈕 做跳和蹲的動作
2.轉VR改變速度
3.碰到障礙 HP-1 Led燈熄1顆
==================================================*/

#include <Thread.h>
#include <ThreadController.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x3F,2,1,0,4,5,6,7,3,POSITIVE);  // Set the LCD I2C address

// Pin set ------------------------  
const int Button_Jump = 2;
const int Button_Squat = 3;
const int LED_Lifea = 4;
const int LED_Lifeb = 5;
const int LED_Lifec = 6;
const int Button_Speed = A1; //A1

enum MovingState {None, Jump, Squat};        // 無狀態、跳、蹲
enum Obstacle {NoneObstacle, Low, Mid, High};

// Thread set ------------------------
ThreadController controll = ThreadController();
Thread Thread_PlayerMove = Thread();             //偵測 跳 & 蹲
Thread Thread_ObstacleGenerate = Thread();
Thread Thread_ScreenMove = Thread();
Thread Thread_SetSpeed = Thread();
Thread Thread_GetLifeLed = Thread();

// State
int MovingState = None;
int ObstacleState = None;
int SreenSpeed = 700; 
char ObstacleArray[2][16];
int ObstacleCount = 0;
int Life = 3;

void setup() {
  pinMode(Button_Jump, INPUT);
  pinMode(Button_Squat, INPUT);
  pinMode(Button_Speed, INPUT);
  pinMode(LED_Lifea, OUTPUT);
  pinMode(LED_Lifeb, OUTPUT);
  pinMode(LED_Lifec, OUTPUT);

  Serial.begin(9600);  
  randomSeed(analogRead(0));                          
  lcd.begin(16, 2);

  Thread_ScreenMove.onRun(ScreenMoving);
  Thread_ScreenMove.setInterval(SreenSpeed);
  Thread_GetLifeLed.onRun(GetLifeLed);
  Thread_GetLifeLed.setInterval(SreenSpeed);
  Thread_PlayerMove.onRun(GetPlayerMoving);
  Thread_PlayerMove.setInterval(50);
  Thread_ObstacleGenerate.onRun(SetObstacle);
  Thread_ObstacleGenerate.setInterval(100);
  Thread_SetSpeed.onRun(GetSpeed);
  Thread_SetSpeed.setInterval(100);
  

  controll.add(&Thread_ScreenMove);
  controll.add(&Thread_PlayerMove);        
  controll.add(&Thread_ObstacleGenerate);
  controll.add(&Thread_SetSpeed);
  controll.add(&Thread_GetLifeLed);   

  ResetObstacleArray();
  lcd.print("Test Game!");
}

void loop() { 
  controll.run();
}

void GetSpeed()
{
    SreenSpeed = map(analogRead(Button_Speed), 0, 1023, 50, 700);  
    Thread_ScreenMove.setInterval(SreenSpeed);
    Serial.println(SreenSpeed);
}

void GetLifeLed()
{
    if(Life == 3)
    {
      digitalWrite(LED_Lifea,HIGH);
      digitalWrite(LED_Lifeb,HIGH);
      digitalWrite(LED_Lifec,HIGH);
    }
    else if(Life == 2)
    {
      digitalWrite(LED_Lifea,HIGH);
      digitalWrite(LED_Lifeb,HIGH);
      digitalWrite(LED_Lifec,LOW);  
    }
    else if(Life == 1)
    {
      digitalWrite(LED_Lifea,HIGH);
      digitalWrite(LED_Lifeb,LOW);
      digitalWrite(LED_Lifec,LOW);
    }  
}

void ScreenMoving()
{
     lcd.clear();

     //playerposition
     if(MovingState == Jump)
     {
         lcd.setCursor(0, 0);
         lcd.print("P");
     }
     else if(MovingState == Squat)
     {
         lcd.setCursor(0, 1);
         lcd.print("b"); 
     }
     else
     {
         lcd.setCursor(0, 1);
         lcd.print("P"); 
     }

     //ObstacleState
     //Obstacle Move
     for(int k=0;k<2;k++)
     {
        for(int j=1;j<16;j++)
        {     
           if(ObstacleArray[k][j] == 'o')                               
           {
              ObstacleArray[k][j] = ' ';
              ObstacleArray[k][j-1] = 'o';              
           }
           else if(ObstacleArray[k][j] == 'q')                               
           {
              ObstacleArray[k][j] = ' ';
              ObstacleArray[k][j-1] = 'q'; 
           }
           else if(ObstacleArray[k][j] == 'd')                               
           {
              ObstacleArray[k][j] = ' ';
              ObstacleArray[k][j-1] = 'd'; 
           }
        }
     }  
     //New Obstacle
     if(ObstacleState == Low)
     {
         ObstacleArray[1][15] = 'd';
     }
     else if(ObstacleState == Mid)
     {
         ObstacleArray[1][15] = 'q';
     }
     else if(ObstacleState == High)
     {
         ObstacleArray[0][15] = 'o';
     }
     else
     {
         ObstacleArray[1][15] = ' ';
     }
     //Show
     for(int k=0;k<2;k++)
     {
        for(int j=1;j<16;j++)
        {
           lcd.setCursor(j, k);
           lcd.print(ObstacleArray[k][j]);
        }
     }  
     //Cheak
     if(MovingState == Jump && ObstacleArray[0][0] != ' ')
     {
        ResetObstacleArray();
        lcd.setCursor(0, 0);
        lcd.print("Game Over!");
        Life--;
     }
     else if(MovingState == Squat && ObstacleArray[1][0] == 'd')
     {
        ResetObstacleArray();
        lcd.setCursor(0, 0);
        lcd.print("Game Over!");
        Life--;
     }
     else if(MovingState == None && ObstacleArray[1][0] != ' ')
     {
        ResetObstacleArray();
        lcd.setCursor(0, 0);
        lcd.print("Game Over!");
        Life--;
     }
     else
     {
        ObstacleArray[0][0] = ' ';
        ObstacleArray[1][0] = ' ';
     }
     if(Life == 0)
     {Life = 3;}
     
     MovingState = None;
}

void ResetObstacleArray()
{
    for(int k=0;k<2;k++)
    {
        for(int j=0;j<16;j++)
        {
           ObstacleArray[k][j] = ' ';
        }
    }  
}

void SetObstacle()
{
  int obstacle = random(0, 10);
  Serial.println(obstacle);
  if(obstacle == Low)
  {ObstacleState = Low;}
  else if(obstacle == Mid)
  {ObstacleState = Mid;}
  else if(obstacle == High)
  {ObstacleState = High;}
  else
  {ObstacleState = NoneObstacle;} 
}

void GetPlayerMoving()
{
      if(digitalRead(Button_Squat) == HIGH)
      {
         MovingState = Squat;
      }  
      
      else if(digitalRead(Button_Jump) == HIGH)
      {
         MovingState = Jump;
      }  
}
